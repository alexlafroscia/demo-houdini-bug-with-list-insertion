/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

declare global {
	interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {}

export interface NexusGenScalars {
	String: string;
	Int: number;
	Float: number;
	Boolean: boolean;
	ID: string;
}

export interface NexusGenObjects {
	Item: {
		// root type
		id: string; // ID!
		message: string; // String!
	};
	List: {
		// root type
		id: string; // ID!
		items: NexusGenRootTypes['Item'][]; // [Item!]!
	};
	Mutation: {};
	Query: {};
}

export interface NexusGenInterfaces {
	Node: NexusGenRootTypes['Item'] | NexusGenRootTypes['List'];
}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars;

export interface NexusGenFieldTypes {
	Item: {
		// field return type
		id: string; // ID!
		message: string; // String!
	};
	List: {
		// field return type
		id: string; // ID!
		items: NexusGenRootTypes['Item'][]; // [Item!]!
	};
	Mutation: {
		// field return type
		addItem: NexusGenRootTypes['Item']; // Item!
	};
	Query: {
		// field return type
		list: NexusGenRootTypes['List'] | null; // List
		lists: NexusGenRootTypes['List'][]; // [List!]!
		node: NexusGenRootTypes['Node'] | null; // Node
	};
	Node: {
		// field return type
		id: string; // ID!
	};
}

export interface NexusGenFieldTypeNames {
	Item: {
		// field return type name
		id: 'ID';
		message: 'String';
	};
	List: {
		// field return type name
		id: 'ID';
		items: 'Item';
	};
	Mutation: {
		// field return type name
		addItem: 'Item';
	};
	Query: {
		// field return type name
		list: 'List';
		lists: 'List';
		node: 'Node';
	};
	Node: {
		// field return type name
		id: 'ID';
	};
}

export interface NexusGenArgTypes {
	Mutation: {
		addItem: {
			// args
			listID: string; // ID!
			message: string; // String!
		};
	};
	Query: {
		list: {
			// args
			id: string; // ID!
		};
		node: {
			// args
			id: string; // ID!
		};
	};
}

export interface NexusGenAbstractTypeMembers {
	Node: 'Item' | 'List';
}

export interface NexusGenTypeInterfaces {
	Item: 'Node';
	List: 'Node';
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = 'Node';

export type NexusGenFeaturesConfig = {
	abstractTypeStrategies: {
		isTypeOf: false;
		resolveType: true;
		__typename: false;
	};
};

export interface NexusGenTypes {
	context: any;
	inputTypes: NexusGenInputs;
	rootTypes: NexusGenRootTypes;
	inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
	argTypes: NexusGenArgTypes;
	fieldTypes: NexusGenFieldTypes;
	fieldTypeNames: NexusGenFieldTypeNames;
	allTypes: NexusGenAllTypes;
	typeInterfaces: NexusGenTypeInterfaces;
	objectNames: NexusGenObjectNames;
	inputNames: NexusGenInputNames;
	enumNames: NexusGenEnumNames;
	interfaceNames: NexusGenInterfaceNames;
	scalarNames: NexusGenScalarNames;
	unionNames: NexusGenUnionNames;
	allInputTypes:
		| NexusGenTypes['inputNames']
		| NexusGenTypes['enumNames']
		| NexusGenTypes['scalarNames'];
	allOutputTypes:
		| NexusGenTypes['objectNames']
		| NexusGenTypes['enumNames']
		| NexusGenTypes['unionNames']
		| NexusGenTypes['interfaceNames']
		| NexusGenTypes['scalarNames'];
	allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes'];
	abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
	abstractTypeMembers: NexusGenAbstractTypeMembers;
	objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
	abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
	features: NexusGenFeaturesConfig;
}

declare global {
	interface NexusGenPluginTypeConfig<TypeName extends string> {}
	interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
	interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {}
	interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {}
	interface NexusGenPluginSchemaConfig {}
	interface NexusGenPluginArgConfig {}
}
